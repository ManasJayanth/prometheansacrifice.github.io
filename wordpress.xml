<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2014-11-29 20:08"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Promethean Sacrifice</title>
<link>http://prometheansacrifice.wordpress.com</link>
<description/>
<pubDate>Sat, 29 Nov 2014 20:08:54 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>http://prometheansacrifice.wordpress.com</wp:base_blog_url>
<wp:wp_author>
  <wp:author_login>prometheansacrifice</wp:author_login>
  <wp:author_email>harlequinsguitar@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[prometheansacrifice]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:wp_author>
<wp:category>
  <wp:term_id>59372229</wp:term_id>
  <wp:category_nicename>d3-js</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[d3.js]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>277</wp:term_id>
  <wp:category_nicename>misc</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Misc]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>41556995</wp:term_id>
  <wp:category_nicename>unix-system-programming</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Unix System Programming]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>483122</wp:term_id>
  <wp:tag_slug>advanced-c</wp:tag_slug>
  <wp:tag_name><![CDATA[advanced C]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2674</wp:term_id>
  <wp:tag_slug>bash</wp:tag_slug>
  <wp:tag_name><![CDATA[bash]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2426</wp:term_id>
  <wp:tag_slug>c</wp:tag_slug>
  <wp:tag_name><![CDATA[C]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>135945</wp:term_id>
  <wp:tag_slug>calls</wp:tag_slug>
  <wp:tag_name><![CDATA[calls]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>380719</wp:term_id>
  <wp:tag_slug>computer-networks</wp:tag_slug>
  <wp:tag_name><![CDATA[computer networks]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>203133926</wp:term_id>
  <wp:tag_slug>d3-js-maps</wp:tag_slug>
  <wp:tag_name><![CDATA[d3.js maps]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>203133927</wp:term_id>
  <wp:tag_slug>d3-js-svg-maps</wp:tag_slug>
  <wp:tag_name><![CDATA[d3.js svg maps]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1787434</wp:term_id>
  <wp:tag_slug>dan-pink</wp:tag_slug>
  <wp:tag_name><![CDATA[Dan Pink]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11362</wp:term_id>
  <wp:tag_slug>emacs</wp:tag_slug>
  <wp:tag_name><![CDATA[emacs]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12662</wp:term_id>
  <wp:tag_slug>extensions</wp:tag_slug>
  <wp:tag_name><![CDATA[extensions]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1173885</wp:term_id>
  <wp:tag_slug>file-permissions</wp:tag_slug>
  <wp:tag_name><![CDATA[file permissions]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9544</wp:term_id>
  <wp:tag_slug>files</wp:tag_slug>
  <wp:tag_name><![CDATA[files]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>620731</wp:term_id>
  <wp:tag_slug>fresher</wp:tag_slug>
  <wp:tag_name><![CDATA[fresher]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4799530</wp:term_id>
  <wp:tag_slug>gdal</wp:tag_slug>
  <wp:tag_name><![CDATA[GDAL]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11514665</wp:term_id>
  <wp:tag_slug>geojson</wp:tag_slug>
  <wp:tag_name><![CDATA[geojson]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15329</wp:term_id>
  <wp:tag_slug>geospatial</wp:tag_slug>
  <wp:tag_name><![CDATA[Geospatial]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>647</wp:term_id>
  <wp:tag_slug>html</wp:tag_slug>
  <wp:tag_name><![CDATA[html]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7204</wp:term_id>
  <wp:tag_slug>lab</wp:tag_slug>
  <wp:tag_name><![CDATA[lab]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2885</wp:term_id>
  <wp:tag_slug>motivation</wp:tag_slug>
  <wp:tag_name><![CDATA[motivation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6700</wp:term_id>
  <wp:tag_slug>read</wp:tag_slug>
  <wp:tag_name><![CDATA[read]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>318578</wp:term_id>
  <wp:tag_slug>rename</wp:tag_slug>
  <wp:tag_name><![CDATA[rename]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28240387</wp:term_id>
  <wp:tag_slug>rsa-algorithm</wp:tag_slug>
  <wp:tag_name><![CDATA[RSA algorithm]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9628519</wp:term_id>
  <wp:tag_slug>shapefiles</wp:tag_slug>
  <wp:tag_name><![CDATA[shapefiles]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4621</wp:term_id>
  <wp:tag_slug>startup</wp:tag_slug>
  <wp:tag_name><![CDATA[startup]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>67544</wp:term_id>
  <wp:tag_slug>structures</wp:tag_slug>
  <wp:tag_name><![CDATA[structures]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>740</wp:term_id>
  <wp:tag_slug>system</wp:tag_slug>
  <wp:tag_name><![CDATA[system]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7459462</wp:term_id>
  <wp:tag_slug>system-calls</wp:tag_slug>
  <wp:tag_name><![CDATA[system calls]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>650038</wp:term_id>
  <wp:tag_slug>system-programming</wp:tag_slug>
  <wp:tag_name><![CDATA[system programming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>37208</wp:term_id>
  <wp:tag_slug>ted</wp:tag_slug>
  <wp:tag_name><![CDATA[TED]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5222515</wp:term_id>
  <wp:tag_slug>umask</wp:tag_slug>
  <wp:tag_name><![CDATA[umask]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9203</wp:term_id>
  <wp:tag_slug>unix</wp:tag_slug>
  <wp:tag_name><![CDATA[unix]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>731061</wp:term_id>
  <wp:tag_slug>vtu</wp:tag_slug>
  <wp:tag_name><![CDATA[vtu]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>320736</wp:term_id>
  <wp:tag_slug>wget</wp:tag_slug>
  <wp:tag_name><![CDATA[wget]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8788</wp:term_id>
  <wp:tag_slug>write</wp:tag_slug>
  <wp:tag_name><![CDATA[write]]></wp:tag_name>
</wp:tag>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s2.wp.com/i/buttonw-com.png</url>
		<title> &#187; Promethean Sacrifice</title>
		<link>http://prometheansacrifice.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>http://prometheansacrifice.wordpress.com/about/</link>
  <pubDate>Fri, 21 Dec 2012 16:19:19 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[A metalhead geek - when I'm not coding, I headbang to some heavymetal. I help manage technical issues at <a title="Metal Wani" href="http://http://www.metalwani.com/" target="_blank">Metal Wani</a> - a music web-zine. Currently, I'm interning at <a title="Pykih" href="http://www.pykih.com/" target="_blank">Pykih</a> as a Data Artist.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2012-12-21 16:19:19</wp:post_date>
  <wp:post_date_gmt>2012-12-21 16:19:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>sharing_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>switch_like_status</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Makefiles</title>
  <link>http://prometheansacrifice.wordpress.com/2013/02/10/makefiles/</link>
  <pubDate>Sun, 10 Feb 2013 08:20:35 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=3</guid>
  <description/>
  <content:encoded><![CDATA[<tt>Makefiles</tt> are text files that contain rules for the make utility. make is a commandline utility to build executables and libraries from source code in a certain manner (defined in the <tt>Makefiles</tt>). Though <tt>Makefiles</tt> are widely used to create executables and libraries they are used pretty much for anything that involves a set of commands to transform a source file into a target result.Compilation of the linux kernel involves <tt>Makefiles</tt>. Since I use a GNU/Linux System, make utility I use is GNU make. And unless otherwise mentioned, make utilty I refer to is the GNU make itself. 

The make utility searches the current directory for the Makefile in the order <tt>GNUmakefile, makefile, Makefile</tt> and performs the operations specified in the file. 

<tt>Makefiles</tt> simply have rules. Each rule contains a target and the components the target depends on. Hence rules are also called <i>dependency lines</i>. 
Dependency lines are followed by commands that carry out the operations on the components to generate the target. Commands are always preceded by a TAB character. 
[sourcecode language="text" gutter="false"] 
target [target ...]: [component ...] 
[&lt;TAB&gt;command 1] 
       . 
       . 
       . 
&lt;TAB&gt;command n] 
[/sourcecode] 
Every <tt>Makefile</tt> contains a default target "all" which is executed when no target is specified when invoking make. 
After creating the <tt>Makefile</tt>, the make command can be used to compile the project. 
[sourcecode language="bash"] 
$ make 
[/sourcecode] 
Whenever make is invoked, first the components required to build the target are searched. If not found, a rule for creating the component is searched for. If both of these fail, error is flagged. Hence, if the components are already present, they are not created again. 
<h4> Example </h4> 
Consider building the following files : 
[sourcecode language="C" collapse="true"] 
/*** main.cpp ***/ 
#include &lt;iostream&gt; 
#include &quot;functions.h&quot; 

using namespace std; 

int main() 
{ 
    printtext(); 
    cout &lt;&lt; endl; 
    cout &lt;&lt; &quot;Sum of 6 natural numbers is &quot; &lt;&lt; sumnatural(6) &lt;&lt; endl; 
    return 0; 
} 
[/sourcecode] 
[sourcecode language="C" collapse="true"] 
/*** sumn.cpp ***/ 
#include &quot;functions.h&quot; 
 
int sumnatural(int n) 
{ 
	int sum = 0; 
	int i; 
	for(i = 1; i &amp;lt;= n; ++i) 
	{ 
		sum += i; 
	} 
	 
	return sum; 
} 
[sourcecode language=&quot;C&quot; collapse=&quot;true&quot;] 
/*** print.cpp ***/ 
#include  &lt;iostream&gt;
#include &quot;functions.h&quot; 

using namespace std; 

void printtext()
{ 
	cout &lt;&lt; &quot;Hello World!&quot;; 
} 
[/sourcecode]
[sourcecode language="C" collapse="true"] 
/*** functions.h ***/ 
void printtext(); 
int sumnatural(int n);
[/sourcecode]

The Makefile :
[sourcecode]
CC=g++
CFLAGS=-c -Wall

all: print

print: main.o sumn.o print.o
	$(CC) main.o sumn.o print.o -o print

main.o: main.cpp
	$(CC) $(CFLAGS) main.cpp

sumn.o: sumn.cpp
	$(CC) $(CFLAGS) sumn.cpp

print.o: print.cpp
	$(CC) $(CFLAGS) print.cpp

clean:
	rm -rf *o print
[/sourcecode]

<h4> Variables </h4>
var = value
Normal assignment of a variable - values within it are recursively expanded when the variable is used, not when it's declared.

var := value
Assignment of a variable with simple expansion of the values inside - values within it are expanded at declaration time.

var ?= value
Assignment of a variable only if it doesn't have a value.

var += value
Appending the supplied value to the existing value.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>3</wp:post_id>
  <wp:post_date>2013-02-10 08:20:35</wp:post_date>
  <wp:post_date_gmt>2013-02-10 08:20:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>makefiles</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>First Device Driver – The 'hello world' example</title>
  <link>http://prometheansacrifice.wordpress.com/2013/02/10/first-device-driver-the-hello-world-example/</link>
  <pubDate>Sun, 10 Feb 2013 07:43:32 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=27</guid>
  <description/>
  <content:encoded><![CDATA[[sourcecode language="C"]
#include &lt;linux/module.h&gt;
#include &lt;linux/kernel.h&gt;

static int __init driver_init(void)
{
	printk(KERN_INFO &quot;Hello World&quot;);
	return 0;
}

static void __exit driver_exit(void)
{
	printk(KERN_INFO &quot;Goodbye&quot;);
}

module_init(driver_init);
module_exit(driver_exit);

MODULE_LICENSE(&quot;GPL&quot;);
MODULE_AUTHOR(&quot;freethinker667@gmail.com&quot;);
MODULE_DESCRIPTION(&quot;A Simple Device Driver&quot;);
[/sourcecode]

[sourcecode gutter="false"]
	#include &lt;linux/module.h&gt; 
	#include &lt;linux/init.h&gt; 
[/sourcecode]
These header files are mandatory for all loadable modules. <tt>module.h </tt> contains the definitions and symbols that loadables modules need. <tt> kernel.h </tt> hasAdd <tt>  </tt> if any compilation errors show up.  <tt>init.h </tt> is used to specify the initialisation and clean up functions. Some tutorials have suggested this header file, though my system showed no errors without it.

[sourcecode gutter="false"]
static int __init driver_init(void)
{
	printk(KERN_INFO &quot;Hello World&quot;);
	return 0;
}
[/sourcecode]
<tt>driver_init</tt> is a static function prefixed with __init.
__init is a macro that tells the linker that <tt>driver_init</tt> is to be placed in separate section of the object file so that once used these items can be deleted. <tt> driver_init </tt> is called only once and no other function will call this function.


<a href="http://stackoverflow.com/questions/11680641/init-and-exit-macros-usage-for-built-in-and-loadable-modules"> Check out this StackOverflow question </a> 
<pre>
I was reading about linux kernel development and I just read some text that I don't 
understand. Here is the paragraph, which talks about the __init and __exit macros 
for modules:

"This demonstrates a feature of kernel 2.2 and later. Notice the change in the definitions
of the init and cleanup functions. The __init macro causes the init function to be discarded 
and its memory freed once the init function finishes for built−in drivers, but not loadable 
modules. If you think about when the init function is invoked, this makes perfect sense.

There is also an __initdata which works similarly to __init but for init variables rather 
than functions.

The __exit macro causes the omission of the function when the module is built into the kernel,
 and like __exit, has no effect for loadable modules. Again, if you consider when the cleanup 
function runs"

I get the point; the macro __init causes the init function to be discarded and its memory 
freed once the init function finishes for built-in drivers. But why? not for loadable modules? 
I couldn't make sense of it.

Why for built-in driver but not for loadable modules? Variables, addresses etc assigned in
 __init would be required for the both, right?

Answer :
You're right; even in a module there could be functions that you really don't need after 
initialization, and so they could in principle be removed from memory. The reason __init 
has no effect for modules is more about how easy it would be to implement.

Essentially, the kernel build system looks for all of the functions flagged with __init, 
across all of the pieces of the kernel, and arranges them so that they will all be in the 
same block of memory.

Then, when the kernel boots, it can free that one block of memory all at once.

This pre-sorting idea doesn't work so well with modules. The init code has to be loaded 
when the module is loaded, so it can't share space with other init code. Instead, the kernel
 would have to pick a few hundred bytes out of each module and free them individually.

However, hardware page sizes are typically 4KB, so it's hard to free up memory in chunks 
of less than that. So trying to free the __init functions in each individual module is probably
 more trouble than it's worth.
</pre>

Linux Device Driver [3rd edition] by Jonathan Corbet, Alessandro
 Rubini, and Greg Kroah-Hartman
 says : 
<pre>
The use of module_init is mandatory. This macro adds a special 
section to the module's object code stating where the module's 
initialization function is to be found. Without this definition,
your initialization function is never called.

The cleanup function has no value to return, so it is declared 
void. The _ _exit modifier marks the code as being for module 
unload only (by causing the compiler to place it in a special 
ELF section). If your module is built directly into the kernel, or if your kernel is configured to 
disallow the unloading of modules, functions marked _ _exit are simply discarded. For this reason,
 a function marked _ _exit can be called only at module unload or system shutdown time; any other 
use is an error. Once again, the module_exit declaration is necessary to enable to kernel to find 
your cleanup function.
</pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>27</wp:post_id>
  <wp:post_date>2013-02-10 07:43:32</wp:post_date>
  <wp:post_date_gmt>2013-02-10 07:43:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>first-device-driver-the-hello-world-example</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>crow</title>
  <link>http://prometheansacrifice.wordpress.com/?attachment_id=47</link>
  <pubDate>Sat, 09 Feb 2013 13:38:04 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2013/02/crow.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>47</wp:post_id>
  <wp:post_date>2013-02-09 13:38:04</wp:post_date>
  <wp:post_date_gmt>2013-02-09 13:38:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>crow</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2013/02/crow.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
    <wp:meta_value><![CDATA[pub/silesia]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>crow</title>
  <link>http://prometheansacrifice.wordpress.com/?attachment_id=48</link>
  <pubDate>Sat, 09 Feb 2013 13:42:55 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2013/02/crow1.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>48</wp:post_id>
  <wp:post_date>2013-02-09 13:42:55</wp:post_date>
  <wp:post_date_gmt>2013-02-09 13:42:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>crow-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2013/02/crow1.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
    <wp:meta_value><![CDATA[pub/silesia]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>crow</title>
  <link>http://prometheansacrifice.wordpress.com/?attachment_id=49</link>
  <pubDate>Sat, 09 Feb 2013 13:48:06 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2013/02/crow2.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>49</wp:post_id>
  <wp:post_date>2013-02-09 13:48:06</wp:post_date>
  <wp:post_date_gmt>2013-02-09 13:48:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>crow-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2013/02/crow2.jpg</wp:attachment_url>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_context</wp:meta_key>
    <wp:meta_value><![CDATA[custom-background]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_attachment_is_custom_background</wp:meta_key>
    <wp:meta_value><![CDATA[pub/silesia]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Differences between Driver modules and User Applications</title>
  <link>http://prometheansacrifice.wordpress.com/2013/02/10/differences-between-driver-modules-and-user-applications/</link>
  <pubDate>Sun, 10 Feb 2013 08:33:57 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=52</guid>
  <description/>
  <content:encoded><![CDATA[User applications, when run, perform all the tasks they are meant to do until all the services requested are met. Driver modules, on the other hand, do nothing but simply register themselves with the kernel and simply inform their presence and functionalities.

User applications can be lazy to release resources or perform other kinds of cleaning up : the host OS would take care of this once the program exits. Unlike user apps, driver modules must ensure clean all the mess it created. Allocated memory or changes in any kind of configuration could remain until the system is rebooted.

User applications can link to libraries at the run time. The only libraries that a module can link to are the kernel libraries. Hence, use of functions like printf() (which requires libc) are prohibited. printk() provided by the kernel libraries is used instead.

 Error handling is easier when encountered in user application development: a segmentation fault is taken care of by the OS and a debugger can point out how and what happened. Kernel faults can lead to the crashing of the whole system]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2013-02-10 08:33:57</wp:post_date>
  <wp:post_date_gmt>2013-02-10 08:33:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>differences-between-driver-modules-and-user-applications</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tagged initialisation of structures in C</title>
  <link>http://prometheansacrifice.wordpress.com/2013/03/16/tagged-initialisation-of-structures-in-c/</link>
  <pubDate>Sat, 16 Mar 2013 17:56:38 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=70</guid>
  <description/>
  <content:encoded><![CDATA[Aggregate initializers (initializers in {}) in the specifications according to C89/90,required the programmer to supply an individual initializer for each structure member in order, beginning with the first.

<pre>
For example :
struct A 
{ 
	int a, b, c, d; 
};

struct A s = { 1, 2, 3, 4 };
/* 1 for s.a, 2 for s.b and so on... */
</pre>
It was necessary to specify initializers for all members, i.e. you can stop at any time (remaining members will be zero-initialized). If for some reason only third member of the structure was to be initialised explicitly, you had no other choice but to supply a "dummy" explicit initializer for the first and the second members (just to get to the desired third)

<pre>
/* We only care to explicitly initialize s.c */
struct A s = { 0, 0, 3 };
/* and we have no choice but to explicitly initialize s.a and s.b as well */
</pre>

The new specification of C language (C99) allows the use of "tagged" initializers by supplying the desired member name within the {}
struct A s = { .c = 3 };

That desired member(s) can be explicitly initialised (and ask the compiler to implicitly zero-initialize the rest).

This not only saves some typing but also makes the aggregate independent from the order in which the members are declared in the struct.

Aggregate initializers can be used with arrays too.
<pre>
int a[10] = { [5] = 3 };
</pre>

If an explicit initializer is specifies for just one (or some) member of a struct or an array, the whole aggregate (struct or array) gets initialized, and the members without explicit initializers get zero-initialized.
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>70</wp:post_id>
  <wp:post_date>2013-03-16 17:56:38</wp:post_date>
  <wp:post_date_gmt>2013-03-16 17:56:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>tagged-initialisation-of-structures-in-c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="advanced-c"><![CDATA[advanced C]]></category>
  <category domain="post_tag" nicename="c"><![CDATA[C]]></category>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <category domain="post_tag" nicename="structures"><![CDATA[structures]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>open() and close()</title>
  <link>http://prometheansacrifice.wordpress.com/2013/03/16/open-and-close/</link>
  <pubDate>Sat, 16 Mar 2013 17:00:44 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=74</guid>
  <description/>
  <content:encoded><![CDATA[Any kind of file manipulation requires the use of open() and close(). open() returns a file descriptor that the program can use to identify the file. Using the same file descriptor we the close the file using close().

<h3>open()</h3>

[sourcecode language="C"]
#include &lt;sys/types.h&gt;
#include &lt;fcntl.h&gt;

int open(const char *path,int access_mode,mode_t permission);
[/sourcecode]

<table border="1">
<tr>
<td> <b> Access mode flag </b> </td>
<td> <b> Description </b> </td>
</tr>

<tr>
<td>
O_RDONLY
</td>
<td>
Opens the file in read-only mode
</td>
</tr>

<tr>
<td>
O_WRONLY
</td>
<td>
Opens the file in write-only mode
</td>
</tr>

<tr>
<td>
O_RDWR
</td>
<td>
Opens the file in both read and write mode
</td>
</tr>

<tr>
<td>
O_APPEND
</td>
<td>
Writes to the end of the file
</td>
</tr>

<tr>
<td>
O_CREAT
</td>
<td>
Create the file <b> if it doesnot exist
</td>
</tr>

<tr>
<td>
O_EXCL
</td>
<td>
Usually with O_CREAT, causes open to fail if the named file already exists
</td>
</tr>

<tr>
<td>
O_TRUNC
</td>
<td>
Overwrite the existing file
</td>
</tr>
</table>

Specifying file permissions are optional and are covered in detail in the next  <a href="http://prometheansacrifice.wordpress.com/2013/03/15/file-permissions-and-umask" title="post" target="_blank">post</a> 

[sourcecode language="C"]
#include &lt;iostream&gt;
#include &lt;fcntl.h&gt;

using namespace std;

int main()
{
    int fd;
    char buf[10] = &quot;Data&quot;;
    fd = open(&quot;File.data&quot;,O_WRONLY | O_CREAT | O_TRUNC);
    if(fd &lt; 0)
    {
        return -1;
    }

    if(write(fd,buf,10) &lt; 0)
    {
        return -1;
    }

    close(fd);
    return 0;
}

[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>74</wp:post_id>
  <wp:post_date>2013-03-16 17:00:44</wp:post_date>
  <wp:post_date_gmt>2013-03-16 17:00:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>open-and-close</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="files"><![CDATA[files]]></category>
  <category domain="post_tag" nicename="system"><![CDATA[system]]></category>
  <category domain="post_tag" nicename="system-calls"><![CDATA[system calls]]></category>
  <category domain="post_tag" nicename="unix"><![CDATA[unix]]></category>
  <category domain="category" nicename="unix-system-programming"><![CDATA[Unix System Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>File permissions and umask()</title>
  <link>http://prometheansacrifice.wordpress.com/2013/03/16/file-permissions-and-umask/</link>
  <pubDate>Sat, 16 Mar 2013 17:52:04 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=82</guid>
  <description/>
  <content:encoded><![CDATA[Access permissions can be specified during creation of files.
[sourcecode language="C"]
#include &lt;iostream&gt;
#include &lt;fcntl.h&gt;
using namespace std;
int main()
{
    int fd;
    char buf[10] = &quot;Data&quot;;
    fd = open(&quot;File.data&quot;,O_WRONLY | O_CREAT | O_TRUNC);
    if(fd &lt; 0)
    {
        return -1;
    }
    if(write(fd,buf,10) &lt; 0)
    {
        return -1;
    }
    close(fd);
    return 0;
}
[/sourcecode]
The above code creates a file with default permission : execute permissions for writer (permissions could very well depend on the system).
Unix, as we know, allows three kinds of file access mainly : own
<table border="1">
<tr>
<td>S_IRUSR </td>
<td>Read permission, owner</td>
</tr>
<tr>
<td>S_IWUSR</td>
<td>Write permission, owner </td>
</tr>
<tr>
<td>S_IXUSR</td>
<td>Execute permission, owner </td>
</tr>
<tr>
<td>S_IRGRP</td>
<td>Read permission, group </td>
</tr>
<tr>
<td>S_IWGRP</td>
<td>Write permission, group </td>
</tr>
<tr>
<td>S_IXGRP</td>
<td>Execute permission, group
</tr>
<tr>
<td>S_IROTH</td>
<td>Read permission, others </td>
</tr>
<tr>
<td>S_IWOTH</td>
<td>Write permission, others </td>
</tr>
<tr>
<td>S_IXOTH</td>
<td>Execute permission, others </td>
</tr>
<table>
In addition, we also have S_IRWXU,S_IRWXG and S_IRWXO.
<h3> umask </h3>
In practise, no matter what access permissions are specified, every file permission value specified is modified by the calling process umask value. A <i>umask</i> specifies some access rights to be <b> taken away </b>. This value is inherited from the parent proces, and can be modified or queried using the <b> umask() </b> system call.
[sourcecode language="C"]
#include &lt;sys/stat.h&gt;
mode_t umask(mode_t new_mask);
[/sourcecode]
The following code demonstrates file permissions and umask().
[sourcecode language="C"]
#include &lt;iostream&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;unistd.h&gt;
using namespace std;
int main()
{
    int fd1,fd2;
    char buf[10] = &quot;Data&quot;;
    fd1 = open(&quot;File1.data&quot;,O_WRONLY | O_CREAT | O_TRUNC,S_IRWXU | S_IRWXG | S_IRWXO); // to all
    if(fd1 &lt; 0)
    {
        return -1;
    }
    if(write(fd1,buf,10) &lt; 0)
    {
        return -1;
    }
    cout &lt;&lt; &quot;umask of this process before umask() : &quot; &lt;&lt; umask(0) &lt;&lt; endl;
    fd2 = open(&quot;File2.data&quot;,O_WRONLY | O_CREAT | O_TRUNC,S_IRWXU | S_IRWXG | S_IRWXO); // to all again
    if(fd2 &lt; 0)
    {
        return -1;
    }
    if(write(fd2,buf,10) &lt; 0)
    {
        return -1;
    }
    cout &lt;&lt; &quot;umask of this process before umask() : &quot; &lt;&lt; umask(0) &lt;&lt; endl;
    close(fd1);
    close(fd2);
    return 0;
}
[/sourcecode]
Compile the above and run the following commands
[sourcecode language="bash"]
ls -l File1.data
[/sourcecode]
[sourcecode language="bash"]
ls -l File2.data
[/sourcecode]
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>82</wp:post_id>
  <wp:post_date>2013-03-16 17:52:04</wp:post_date>
  <wp:post_date_gmt>2013-03-16 17:52:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>file-permissions-and-umask</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="file-permissions"><![CDATA[file permissions]]></category>
  <category domain="post_tag" nicename="system-programming"><![CDATA[system programming]]></category>
  <category domain="post_tag" nicename="umask"><![CDATA[umask]]></category>
  <category domain="post_tag" nicename="unix"><![CDATA[unix]]></category>
  <category domain="category" nicename="unix-system-programming"><![CDATA[Unix System Programming]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[Khuram Ali]]></wp:comment_author>
    <wp:comment_author_email>arafkhashand@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://alikhuram.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>202.142.172.43</wp:comment_author_IP>
    <wp:comment_date>2013-05-13 10:50:23</wp:comment_date>
    <wp:comment_date_gmt>2013-05-13 10:50:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogged this on <a href="http://alikhuram.wordpress.com/2013/05/13/file-permissions-and-umask/" rel="nofollow">Khuram Ali</a>.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>47492460</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1368442224.1455399990081787109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:9:"alikhuram";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1385735982</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1385735982</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1385735982.5970189571380615234375;s:7:"message";s:58:"prometheansacrifice changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:19:"prometheansacrifice";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2013-05-13 10:50:23</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>creat() read() and write()</title>
  <link>http://prometheansacrifice.wordpress.com/2013/03/16/creat-read-and-write/</link>
  <pubDate>Sat, 16 Mar 2013 14:18:31 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=92</guid>
  <description/>
  <content:encoded><![CDATA[<h3> creat() </h3>
<i>creat() </i> system call can be used to create regular files. 

[sourcecode language="C"]
#include &lt;sys/types.h&gt;
#include &lt;&gt;unistd.h&gt;

int creat(const char *path,mode_t);

[/sourcecode]

<i>creat()</i> has now become obsolete as open() can be used to do the same with O_CREAT. It is now implemented as follows :

[sourcecode language="C"]
#define creat(path,mode) \
		open(path,O_WRONLY, | O_CREAT | O_TRUNC, mode)
[/sourcecode]

<h3>write()</h3>
<i>write()</i> writes a fixed number of blocks of data into a file (referenced by a file descriptor).
[sourcecode language="C"]
#include &lt;iostream&gt;
#include &lt;fcntl.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;

using namespace std;

int main()
{
    char buf[10] = &quot;data...&quot;;
    cout &lt;&lt; &quot;Creating 'file'...\n&quot;;
    int fd = creat(&quot;file&quot;,S_IRWXU);
    cout &lt;&lt; &quot;Writing...\n&quot;;
    write(fd,buf,10);
    cout &lt;&lt; &quot;Closing...\n&quot;;
    close(fd);
    return 0;
}
[/sourcecode]

<h3>read()</h3>
<i>read()</i> fetches a fixed number of blocks of data from a file (referenced by a file descriptor).

[sourcecode language="C"]
#include &lt;iostream&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;fcntl.h&gt;

using namespace std;

int main()
{
    char buf[10] = &quot;data...&quot;;
    int fd;
    cout &lt;&lt; &quot;Opening 'file'\n&quot;;
    fd = open(&quot;file&quot;,O_RDONLY);
    read(fd,buf,10);
    cout &lt;&lt; &quot;Contents:\n&quot;;
    cout &lt;&lt; buf;
    cout &lt;&lt; &quot;\nClosing...\n&quot;;
    close(fd);
    return 0;
}
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>92</wp:post_id>
  <wp:post_date>2013-03-16 14:18:31</wp:post_date>
  <wp:post_date_gmt>2013-03-16 14:18:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>creat-read-and-write</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="calls"><![CDATA[calls]]></category>
  <category domain="post_tag" nicename="read"><![CDATA[read]]></category>
  <category domain="post_tag" nicename="system"><![CDATA[system]]></category>
  <category domain="post_tag" nicename="unix"><![CDATA[unix]]></category>
  <category domain="category" nicename="unix-system-programming"><![CDATA[Unix System Programming]]></category>
  <category domain="post_tag" nicename="write"><![CDATA[write]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Bash Script to rename file extensions</title>
  <link>http://prometheansacrifice.wordpress.com/2013/03/16/bash-script-to-rename-file-extensions/</link>
  <pubDate>Sat, 16 Mar 2013 14:17:57 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=96</guid>
  <description/>
  <content:encoded><![CDATA[[sourcecode language="bash"]
#! /bin/bash
for file in `ls *$1`; do
    mv &quot;$file&quot; &quot;`basename $file $1`$2&quot;
done
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>96</wp:post_id>
  <wp:post_date>2013-03-16 14:17:57</wp:post_date>
  <wp:post_date_gmt>2013-03-16 14:17:57</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bash-script-to-rename-file-extensions</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bash"><![CDATA[bash]]></category>
  <category domain="post_tag" nicename="extensions"><![CDATA[extensions]]></category>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <category domain="post_tag" nicename="rename"><![CDATA[rename]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>bash script to download multiple html pages</title>
  <link>http://prometheansacrifice.wordpress.com/2013/04/04/bash-script-to-download-multiple-html-pages/</link>
  <pubDate>Thu, 04 Apr 2013 19:10:44 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=119</guid>
  <description/>
  <content:encoded><![CDATA[Staying up late, jobless and wanted to read the NASM documentation. And so I write the following script...

[sourcecode language="bash"]
#!/bin/bash 
var=&quot;http://www.nasm.us/doc/nasmdoc&quot; 
no=&quot;0&quot; 
ext=&quot;.html&quot; 
while [ $no -lt 10 ]
do
wget $var$no$ext
no=$((++no))
done
[/sourcecode]

The rest were manually downloaded :P]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>119</wp:post_id>
  <wp:post_date>2013-04-04 19:10:44</wp:post_date>
  <wp:post_date_gmt>2013-04-04 19:10:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>bash-script-to-download-multiple-html-pages</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bash"><![CDATA[bash]]></category>
  <category domain="post_tag" nicename="html"><![CDATA[html]]></category>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <category domain="post_tag" nicename="wget"><![CDATA[wget]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://prometheansacrifice.wordpress.com/?p=123</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=123</guid>
  <description/>
  <content:encoded><![CDATA[[sourcecode language="C"]
#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/wait.h&gt;

using namespace std;

int main()
{
	pid_t c1,rc1;
	int status;
	c1 = fork();
	switch(c1)
	{
		case -1:
		perror(&quot;fork:&quot;);
		return -1;

		case 0:
		cout &lt;&lt; &quot;Child process here:\n&quot;;
		cout &lt;&lt; &quot;My pid: &quot; &lt;&lt; getpid() &lt;&lt; &quot;\n&quot;;
		cout &lt;&lt; &quot;My Parent's pid: &quot; &lt;&lt; getppid() &lt;&lt; &quot;\n&quot;;
		cout &lt;&lt; &quot;Exiting...\n&quot;;
		_exit(4);
	
		default:
		rc1 = wait(&amp;status);
		cout &lt;&lt; &quot;Parent here:\n&quot;;
		cout &lt;&lt; &quot;My pid: &quot; &lt;&lt; getpid() &lt;&lt; &quot;\n&quot;;
		cout &lt;&lt; &quot;Child pid: &quot; &lt;&lt; c1 &lt;&lt; &quot;\n&quot;;
		cout &lt;&lt; &quot;Return value from wait(): &quot; &lt;&lt; rc1 &lt;&lt; &quot;\n&quot;;
		cout &lt;&lt; &quot;Child's exit status: &quot; &lt;&lt; WEXITSTATUS(status) &lt;&lt; &quot;\n&quot;;
	}
	return 0;
}
[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>123</wp:post_id>
  <wp:post_date>2013-04-11 07:58:45</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Installing GDAL</title>
  <link>http://prometheansacrifice.wordpress.com/2013/11/30/installing-gdal/</link>
  <pubDate>Sat, 30 Nov 2013 08:43:37 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=128</guid>
  <description/>
  <content:encoded><![CDATA[Geospatial Data Abstraction Library is a translator library to assist converting data in one geospatial format to another. Mainly I wanted to convert shapefiles to GeoJSON as instructed <a href="http://bost.ocks.org/mike/map/">here</a>

Mac users can easily install GDAL using Homebrew
<pre>brew install gdal</pre>
GDAL, for ubuntu systems, can be found in the ubuntugis repository. <a href="https://wiki.ubuntu.com/UbuntuGIS">UbuntuGIS</a> is a repository containing popular GIS applications. GDAL is one of them.

Thus, installing GDAL requires adding of the ubuntugis PPA (Personal Package Achives) to your ubuntu system
<pre>sudo add-apt-repository ppa:ubuntugis/ppa
</pre>
This adds the ppa of stable repository to the system. For the more curious, refer <a href="https://launchpad.net/%7Eubuntugis/+archive/ppa/">this</a>

<a href="http://trac.osgeo.org/gdal/wiki/DownloadingGdalBinaries">This</a> has information for installing GDAL for other platforms

The "quickstart" guide <a href="http://trac.osgeo.org/ubuntugis/wiki/UbuntuGISRepository">here</a> has more information

After this, its only a matter of installing the GIS apps we need - in this case GDAL
<pre>sudo apt-get install gdal-bin
</pre>
Yes! You saw it right. It's not gdal but gdal-bin. Remember this if you want to save hours of googling trying to figure out why its not working. This <a href="http://lists.osgeo.org/pipermail/ubuntu/2012-May/000565.html">link</a> helped me out.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>128</wp:post_id>
  <wp:post_date>2013-11-30 08:43:37</wp:post_date>
  <wp:post_date_gmt>2013-11-30 08:43:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>installing-gdal</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="gdal"><![CDATA[GDAL]]></category>
  <category domain="post_tag" nicename="geojson"><![CDATA[geojson]]></category>
  <category domain="post_tag" nicename="geospatial"><![CDATA[Geospatial]]></category>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <category domain="post_tag" nicename="shapefiles"><![CDATA[shapefiles]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Drawing Maps using D3.js - svg maps</title>
  <link>http://prometheansacrifice.wordpress.com/2013/12/03/drawing-maps-using-d3-js-svg-maps/</link>
  <pubDate>Tue, 03 Dec 2013 13:09:23 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=132</guid>
  <description/>
  <content:encoded><![CDATA[And so I decide to create maps using d3.js using this <a href="http://www.schneidy.com/Tutorials/MapsTutorial.html">tutorial</a>. The tutorial creates a map of NYC - me I wanted the state of karnataka where I live.

The first piece of code illustrates creating maps using SVG maps.

[code language="javascript" gutter="false"]
var length = 300;
var width = 350;

var svg = d3.select('body').append('svg')
.attr('width', width))
.attr('height', height);
var group = svg.append('g');

var NYPath = &quot;M7.0371 120.844l-0.6373 11.9674 … -1.0232 0.1923z”;

var ny = group.append('path')
.attr('d', NYPath)
.style('fill', 'grey')
.style('stroke', 'black')
.style('stroke-width', 1);

[/code]


SVG maps made up of paths as it reads. So I go and download the SVG map of NYC and Karnataka. Little did I know SVG maps don't simply contain paths - they hold all kinds of data about the map in a standard xml document. Time to dig into XML docs and write a parser for ourselves - obviously no one wants to sit and copy paste paths manually. Besides SVG maps tend to have other info like the height and width of the doc which is needed too.
<h2 id="enterdragonummxmlparser">Enter dragon..umm XML parser</h2>
Another request goes to the Google servers. This time I'm interested in <a href="http://www.hiteshagrawal.com/javascript/javascript-xml-parsing-on-mozilla-firefox-opera-browsers">this</a> link. I try the code out

<img alt="" src="http://127.0.0.1:2368/content/images/2013/Nov/firebug_xml_load.png" />

Looking up...

I reach <a href="http://www.w3schools.com/xml/xml_parser.asp">here</a>. Further documentation <a href="http://www.w3schools.com/dom/dom_http.asp">here</a>

The same example code updated would look like this:

[code language="javascript" gutter="false"]    if (window.XMLHttpRequest){
        // code for IE7+, Firefox, Chrome, Opera, Safari
        xmlhttp=new XMLHttpRequest();
    }
    else {
        // code for IE6, IE5
        xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
    }
    xmlhttp.open(&quot;GET&quot;,&quot;employee.xml&quot;,false);
    xmlhttp.send();
    if (xmlhttp.readyState == XMLHttpRequest.DONE) {
        xmlDoc=xmlhttp.responseXML;

        // alert(&quot;XML Root Tag Name: &quot; + xmlDoc.documentElement.tagName);
        console.log(&quot;XML Root Tag Name: &quot; + xmlDoc.documentElement.tagName);

        //Using nodeValue and Attributes Properties
        //Here both the statement will return you the same result
        //Output 001
        // alert(&quot;Node Value: &quot; + xmlDoc.documentElement.childNodes[1].attributes[0].nodeValue);
        console.log(&quot;Node Value: &quot; + xmlDoc.documentElement.childNodes[1].attributes[0].nodeValue);

        // alert(&quot;Node Value: &quot; + xmlDoc.documentElement.childNodes[1].attributes.getNamedItem(&quot;id&quot;).nodeValue);
        console.log(&quot;Node Value: &quot; + xmlDoc.documentElement.childNodes[1].attributes.getNamedItem(&quot;id&quot;).nodeValue);

        //Using getElementByTagName Properties
        //Here both the statement will return you the same result
        //Output 2000
        // alert(&quot;getElementsByTagName: &quot; + xmlDoc.getElementsByTagName(&quot;year&quot;)[0].attributes.getNamedItem(&quot;id&quot;).nodeValue);
        console.log(&quot;getElementsByTagName: &quot; + xmlDoc.getElementsByTagName(&quot;year&quot;)[0].attributes.getNamedItem(&quot;id&quot;).nodeValue);

        //Using text Properties
        //Output John
        // alert(&quot;Text Content for Employee Tag: &quot; + xmlDoc.documentElement.childNodes[1].textContent);
        console.log(&quot;Text Content for Employee Tag: &quot; + xmlDoc.documentElement.childNodes[1].textContent);
    }
[/code]
<h3 id="writingtheparser">Writing the parser</h3>
The svg map of Karnataka has a group of paths drawing the other states

[code language="html" gutter="false"]
&lt;g id=&quot;other_state&quot;&gt;
         &lt;g id=&quot;g67&quot;&gt;
            &lt;path d=&quot;M873.09,2358 ...
         &lt;/g&gt;
         .
         .
         .
&lt;/g&gt;;
[/code]


Lets try to draw these paths. The d3 code would now look like:

[code language="javascript"]/**
* Code to pare the d attribute form the SVG map of Karnataka
*/
$('#viz-container').html('&amp;lt;button type=&quot;button&quot; id=&quot;next&quot;&amp;gt;Next&amp;lt;/button&amp;gt;');
var Districts = [
'Bidar',
'Yadgir',
'Gulbarga',
'Belgaum',
'Bellary',
'Chikballapur',
'Kolar',
'Chikmangaluru',
'Hassan',
'Ramnagara',
'Bangalore Rural',
'Bangalore Urban',
'Mandya',
'Kodagu',
'Tumkur',
'Raichur',
'Koppal',
'Bagalkot',
'Bijapur',
'Dharwad',
'Haveri',
'Gadag',
'DK',
'Mysore',
'Chamrajnagar',
'Shimoga',
'Davangere',
'Chitradurga',
'N Canara',
'Udupi'
];
var tooltip = d3.select(&quot;body&quot;)
    .append(&quot;div&quot;).attr(&quot;id&quot;, &quot;pyk-bubble-tooltip&quot;)
    .style(&quot;position&quot;, &quot;absolute&quot;)
    .style(&quot;z-index&quot;, &quot;10&quot;)
    .style(&quot;visibility&quot;, &quot;hidden&quot;)
    .style(&quot;background&quot;, &quot;#fff&quot;)
    .style(&quot;padding&quot;, &quot;10px 20px&quot;)
    .style(&quot;box-shadow&quot;, &quot;0 0 10px #000&quot;)
    .style(&quot;border-radius&quot;, &quot;5px&quot;)
    .text(&quot;a simple tooltip&quot;);

var svg = d3.select('body').append('svg')
var group = svg.append('g');

if (window.XMLHttpRequest){
    // code for IE7+, Firefox, Chrome, Opera, Safari
    xmlhttp=new XMLHttpRequest();
}
else {
    // code for IE6, IE5
    xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
}
xmlhttp.open(&quot;GET&quot;,&quot;maps/kmap.svg&quot;,false);
xmlhttp.send();
xmlDoc=xmlhttp.responseXML;

var h = xmlDoc.getElementsByTagName('svg')[0].getAttribute('height');
var w = xmlDoc.getElementsByTagName('svg')[0].getAttribute('width');
svg.attr('width', w)
    .attr('height', h);

var node = xmlDoc.getElementById('ka');
var districtPaths = [];
var nodes = node.getElementsByTagName('path')
for(var i = 0; i &amp;lt; nodes.length; ++i) {
    districtPaths[i] = nodes[i].getAttribute('d');
}
console.log(districtPaths);

var ny = group
    .selectAll('path')
    .data(districtPaths)
    .enter()
    .append('path')
    .attr('d', function (d, i) {
        return d;
    })
    .attr('id', function (d, i){
        return i;
    })
    .style('fill', 'grey')
    .style('stroke', 'black')
    .style('stroke-width', 1)
    .attr('transform', 'scale(0.2)')
    .on(&quot;mouseover&quot;, function (d, i) {
        return tooltip.html(Districts[i]).style(&quot;visibility&quot;, &quot;visible&quot;);
    })
    .on(&quot;mousemove&quot;, function () {
        return tooltip.style(&quot;top&quot;, (d3.event.pageY - 10) + &quot;px&quot;).style(&quot;left&quot;, (d3.event.pageX + 10) + &quot;px&quot;);
    })
    .on(&quot;mouseout&quot;, function () {
        return tooltip.style(&quot;visibility&quot;, &quot;hidden&quot;);
    })
[/code]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>132</wp:post_id>
  <wp:post_date>2013-12-03 13:09:23</wp:post_date>
  <wp:post_date_gmt>2013-12-03 13:09:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>drawing-maps-using-d3-js-svg-maps</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="d3-js"><![CDATA[d3.js]]></category>
  <category domain="post_tag" nicename="d3-js-svg-maps"><![CDATA[d3.js svg maps]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Running Perl CGI scripts</title>
  <link>http://prometheansacrifice.wordpress.com/2013/12/07/running-perl-cgi-scripts/</link>
  <pubDate>Sat, 07 Dec 2013 18:53:56 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/2013/12/07/running-perl-cgi-scripts/</guid>
  <description/>
  <content:encoded><![CDATA[<section>
<div>
<h3>Common Gateway Interface</h3>
CGI is an interface which tells the web server how to pass data back and forth to and from an application. Its allows rendering of dynamic web pages. Files requested from the special cgi-bin directory should not simply be read and sent, but instead should be<strong> executed.</strong>
<h3 id="installation">Installation</h3>
CGI is actually a program called by the web server. This means a web server must be installed to run CGI scripts. In this post I assume you have installed Apache as your web server. Instructions to install Apache may be found <a title="here" href="http://www.linuxcandy.com/2012/05/how-to-install-lamp-in-ubuntu-12-04-precise-pangolin.html#comment-313" target="_blank">here</a>

Inorder to run CGI scripts, Apache must be configured to allow CGI execution. More info <a href="http://httpd.apache.org/docs/2.2/howto/cgi.html">here</a>

Open the configuration file <code>default</code> in <code>/etc/apache2/sites-available/</code>

[code language="javascript"]sudo gedit /etc/apache2/sites-available/default
[/code]

Search for the keyword <code>ScriptAlias</code> (Use Ctrl + F)
You should see an entry like this

[code language="javascript"]ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
&lt;Directory &quot;/usr/lib/cgi-bin&quot;&gt;
    AllowOverride None
    Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
    Order allow,deny
    Allow from all
&lt;/Directory&gt;
[/code]

This mean Apache has been configured to execute scripts from <code>/usr/lib/cgi-bin/</code>

Place your files in this directory and give execute permissions for the web server.

[code language="javascript"]sudo chmod a+x filename.pl
[/code]

Enter the url as <a href="http://localhost/cgi-bin/filename.pl">http://localhost/cgi-bin/filename.pl</a> as see the results.

</div>
</section>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>142</wp:post_id>
  <wp:post_date>2013-12-07 18:53:56</wp:post_date>
  <wp:post_date_gmt>2013-12-07 18:53:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>running-perl-cgi-scripts</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Home</title>
  <link>http://prometheansacrifice.wordpress.com/?p=150</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=150</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>150</wp:post_id>
  <wp:post_date>2013-12-07 19:53:21</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[150]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[custom]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[http://prometheansacrifice.wordpress.com/]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1386446001]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>http://prometheansacrifice.wordpress.com/?p=151</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=151</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>151</wp:post_id>
  <wp:post_date>2013-12-07 19:53:21</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1386446001]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>RSA Algorithm</title>
  <link>http://prometheansacrifice.wordpress.com/2013/12/14/rsa-algorithm/</link>
  <pubDate>Sat, 14 Dec 2013 17:15:19 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=153</guid>
  <description/>
  <content:encoded><![CDATA[Rivest Shamir Adleman Algorithm is an algorithm used to encrypt data. It creates two keys, public and private, to encrypt and decrypt the data - public key to encrypt it and private to decrypt. To create the keys, the algorithm takes two prime numbers as input.

The relationship between the two key and how they help encrypt and decrypt data involves considerably complex math. Important thing to note is that the plain text (piece of data being encrypted) must be smaller than the product of the prime numbers used to generate the public and private keys.

In the following code, we try to encrypt a string and decrypt it back - character by character. Each character - capital or small - lies in the ASCII range of 65 - 122 (65-90 for caps and 97-122 for lower case). This mean as we encrypt each character, the plain text (the character itself) can at most be 122.

The rule says, plain text must be smaller than the product of the two prime numbers chosen - i.e. the prime numbers chosen must be large enough.

The complete working code can be found <a title="here" href="https://github.com/prometheansacrifice/vtu-lab-programs/blob/master/Computer%20Networks/pgm6/rsa.c" target="_blank">here.</a>

[sourcecode language="text" gutter="false"]

/* RSA algorithm to generate a public and a private key and encrypt and decrypt the message text*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;math.h&gt;
#include &lt;string.h&gt;
unsigned int c, m, pt[50], ct[50], msglength;
char message[50];

int mult(unsigned int plaintext, unsigned int key, unsigned int n){
unsigned long int k = 1;
int j;
for (j = 1; j &lt;= key; j++)
k = (k * plaintext) % n;
return (unsigned int) k;
}

int isPrime(int n){
int i, lim;
lim = n / 2;
for(i = 2; i &lt;= lim; i++)    {
if((n % i) == 0)        {
return 0; // Not prime
}
}
return 1; //Prime
}

int gcd (int a, int b){
if(b == 0) {
return 1;
}
while(b){
int rem = a % b;
a = b;
b = rem;
}
return a;
}

int main ()
{
int i, j; // for loop
int p, q; //The prime numbers
int d, e; //d -&gt; private key e -&gt; public key
int z, n; //n  = p * q and z = (p-1) * (q-1)

printf(&quot;Enter two prime numbers (such that their product is atleast more than 150): &quot;);
scanf(&quot;%d %d&quot;, &amp;p, &amp;q);
// p = 11; q = 23;

if((isPrime(p) == 0) || (isPrime(q) == 0)){
printf(&quot;Invalid Numbers !! Please Enter Prime Numbers \n&quot;);
return 1;
}

if(p == q){
printf(&quot;Two Prime Numbers Must be Different \n&quot;);
return 1;
}

n = p * q;
z = (p - 1) * (q - 1);

//--- Calculating e ---//
for(i = 2; i &lt; z; i++) {
if((gcd(z, i)) == 1){
e = i;
printf(&quot;e = %d\n&quot;, e);
break;
}
}

//--- Calculating d ---/
for(j = n; j &gt;= 1; j--){
if(((e * j) % z) == 1){
d = j; //private key
printf(&quot;d = %d\n&quot;, d);
break;
}
}

printf(&quot;Enter The Text To Encrypt \n&quot;);
scanf(&quot;%s&quot;, message);

msglength = strlen(message);
for(i = 0; i &lt; msglength; i++)
pt[i] = message[i];

for(i = 0; i &lt; msglength; i++){
ct[i] = mult(pt[i], e, n);
}

printf(&quot;The Encrypted Text is \n&quot;);
for(i = 0;i &lt; msglength; i++)
printf(&quot;%d &quot;, ct[i]);

printf(&quot;\nThe Decrypted Text is \n&quot;);
for(i = 0;i &lt; msglength; i++){
pt[i] = mult(ct[i], d, n);
printf(&quot;%c&quot;, pt[i]);
}

printf(&quot;\n&quot;);
return 0 ;
}

[/sourcecode]]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>153</wp:post_id>
  <wp:post_date>2013-12-14 17:15:19</wp:post_date>
  <wp:post_date_gmt>2013-12-14 17:15:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>rsa-algorithm</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="computer-networks"><![CDATA[computer networks]]></category>
  <category domain="post_tag" nicename="lab"><![CDATA[lab]]></category>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <category domain="post_tag" nicename="rsa-algorithm"><![CDATA[RSA algorithm]]></category>
  <category domain="post_tag" nicename="vtu"><![CDATA[vtu]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Setting up IRC bouncers using FreeBNC's ZNC and Mozilla's ChatZilla</title>
  <link>http://prometheansacrifice.wordpress.com/?p=173</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=173</guid>
  <description/>
  <content:encoded><![CDATA[<p>IRC bouncers (shortened as BNC) are servers that act as proxies between the you and the servers. Besides this, they provide lot of useful services like logging the messages when away. In this post, I'll explain setting up BNC servers provided by <a title="freeBNC" href="http://freebnc.net/" target="_blank">freeBNC</a>. freeBNC uses <a title="ZNC" href="http://wiki.znc.in/ZNC" target="_blank">ZNC</a>, the BNC server program.</p>
<p>The very first step is to register with freeBNC. As instructed <a title="here" href="http://freebnc.net/apply" target="_blank">here</a>, this requires logging on to their <a title="channel" href="irc://irc.esper.net/freeBNC" target="_blank">channel</a> and issuing the following command there.</p>
<p>[code language="bash"]!apply user irc_server irc_port mail​[/code]</p>
<p>As the site itself says, a possible example would be,</p>
<p>[code language="bash"]!apply ChauffeR irc.esper.net 6667 chauffer@freebnc.net[/code]</p>
<p>The bot at the IRC would send a confirmation email. Follow the instructions and wait for approval.</p>
<h2>Configuring ZNC</h2>
<p>Once the application has been approved, the ZNC bouncer has to be configured.</p>
<p>IRC bouncers work like this - the bouncer runs 24x7 on the servers and have to be configured to enter the chat room (the IRC channel) we want to use. Once configured, we simply connect to the BNC rarther than the IRC server for the channel - the BNC itself would show channel window once connected.<a href="http://prometheansacrifice.files.wordpress.com/2013/12/screenshot-from-2013-12-23-003526.png"><img class="size-medium wp-image-196 aligncenter" alt="Screenshot from 2013-12-23 00:35:26" src="http://prometheansacrifice.files.wordpress.com/2013/12/screenshot-from-2013-12-23-003526.png?w=300" width="300" height="110" /></a></p>
<p>Explicitly select the</p>
<p style="display:inline;">Bind Host and</p>
<p style="display:inline;">DCC Bind Host as</p>
<p style="display:inline;">par01.gw-out.freebnc.net. Tick connect to IRC and automatically re-connect and add  a channe</p>
<p>&nbsp;</p>
<h2>Configuring the IRC Client</h2>
<p>Chatzilla can be installed by following this <a title="link" href="https://addons.mozilla.org/en-US/firefox/addon/chatzilla/?src=search" target="_blank">link.</a> Once installed, open <a title="this" href="irc://par01.freebnc.net:1337/" target="_blank">this</a> link in mozilla. In other IRC clients like XChat and HexChat, create a new server and name is bnc with <a id="net-url-anchor" href="irc://par01.freebnc.net:1337/">irc://par01.freebnc.net/</a> as the server address and port no 1337 (1338 if you want SSL)</p>
<p>Authenticate yourselves with the following command on the IRC client</p>
<p>[code language="bash"] /quote PASS username:passw0rd [/code]</p>
]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>173</wp:post_id>
  <wp:post_date>2013-12-22 21:16:03</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Screenshot from 2013-12-23 00:35:26</title>
  <link>http://prometheansacrifice.wordpress.com/?attachment_id=196</link>
  <pubDate>Sun, 22 Dec 2013 20:17:17 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2013/12/screenshot-from-2013-12-23-003526.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>196</wp:post_id>
  <wp:post_date>2013-12-22 20:17:17</wp:post_date>
  <wp:post_date_gmt>2013-12-22 20:17:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot-from-2013-12-23-003526</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>173</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2013/12/screenshot-from-2013-12-23-003526.png</wp:attachment_url>
</item>
<item>
  <title>Screenshot from 2013-12-23 00:35:53</title>
  <link>http://prometheansacrifice.wordpress.com/?attachment_id=197</link>
  <pubDate>Sun, 22 Dec 2013 20:17:20 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2013/12/screenshot-from-2013-12-23-003553.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>197</wp:post_id>
  <wp:post_date>2013-12-22 20:17:20</wp:post_date>
  <wp:post_date_gmt>2013-12-22 20:17:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>screenshot-from-2013-12-23-003553</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>173</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2013/12/screenshot-from-2013-12-23-003553.png</wp:attachment_url>
</item>
<item>
  <title>Alan Turing, the father of computer science, gets a royal pardon -- 60 years after his death</title>
  <link>http://prometheansacrifice.wordpress.com/2013/12/24/alan-turing-the-father-of-computer-science-gets-a-royal-pardon-60-years-after-his-death/</link>
  <pubDate>Tue, 24 Dec 2013 17:57:02 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/2013/12/24/alan-turing-the-father-of-computer-science-gets-a-royal-pardon-60-years-after-his-death/</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>200</wp:post_id>
  <wp:post_date>2013-12-24 17:57:02</wp:post_date>
  <wp:post_date_gmt>2013-12-24 17:57:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>alan-turing-the-father-of-computer-science-gets-a-royal-pardon-60-years-after-his-death</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>post_id</wp:meta_key>
    <wp:meta_value><![CDATA[876193]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blog_id</wp:meta_key>
    <wp:meta_value><![CDATA[342986]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>is_reblog</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What The Data Says About How We Spent Christmas Morning</title>
  <link>http://prometheansacrifice.wordpress.com/2013/12/28/what-the-data-says-about-how-we-spent-christmas-morning/</link>
  <pubDate>Sat, 28 Dec 2013 18:15:51 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/2013/12/28/what-the-data-says-about-how-we-spent-christmas-morning/</guid>
  <description/>
  <content:encoded><![CDATA[You never know in what ways you can be tracked!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>204</wp:post_id>
  <wp:post_date>2013-12-28 10:15:51</wp:post_date>
  <wp:post_date_gmt>2013-12-28 18:15:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-the-data-says-about-how-we-spent-christmas-morning</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>post_id</wp:meta_key>
    <wp:meta_value><![CDATA[934211]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blog_id</wp:meta_key>
    <wp:meta_value><![CDATA[24588526]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>is_reblog</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>The puzzle of motivation</title>
  <link>http://prometheansacrifice.wordpress.com/?p=205</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=205</guid>
  <description/>
  <content:encoded><![CDATA[http://www.youtube.com/watch?v=rrkrvAUbU9Y

<p>Just out of college and about to get your first job? All your friends boast about sky high corporate salaries and maybe you've chosen small startup to work at - just because you love it there. You probably were a bright student, maybe you still are but the world around you doesn't acknowledge it. Amidst all these self doubt, you chose what you love and not a big fat salary?

At TED,</p>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>205</wp:post_id>
  <wp:post_date>2014-01-01 18:15:15</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_format" nicename="post-format-video"><![CDATA[Video]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>The puzzle of motivation</title>
  <link>http://prometheansacrifice.wordpress.com/2014/01/01/218/</link>
  <pubDate>Wed, 01 Jan 2014 18:41:01 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=218</guid>
  <description/>
  <content:encoded><![CDATA[Just out of college and about to get your first job? All your friends boast about sky high corporate salaries they plan to get after their Masters and maybe you've chosen small startup to work at - just because you love it there. You probably were a bright student, maybe you still are but the world around you doesn't acknowledge it. Amidst all these self-doubt, you chose what you love and not a big fat salary?

At TED,  Career Analyst Dan Pink talk explains about traditional rewards - financial incentives and why they've failed in the past. Not that they are completely futile - Mr. Pink also explains what they excel at.

Fact remains that it is intrinsic motivation that leads to more productivity - work environments that provide intrinsic motivation are more productive. We're all driven by the desire to do things because they matter, because we like it and because we believe it can be a part of something bigger than ourselves.

No, this talk isn't meant to make you feel better as a fresher getting into the professional world - its actually about what business should really be doing given all the evidence provided by behavioral scientists. So whats in it for you? Well I think it'll help you understand what you're looking for in the long term.

http://www.youtube.com/watch?v=rrkrvAUbU9Y]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>218</wp:post_id>
  <wp:post_date>2014-01-01 18:41:01</wp:post_date>
  <wp:post_date_gmt>2014-01-01 18:41:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>218</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="dan-pink"><![CDATA[Dan Pink]]></category>
  <category domain="post_tag" nicename="fresher"><![CDATA[fresher]]></category>
  <category domain="category" nicename="misc"><![CDATA[Misc]]></category>
  <category domain="post_tag" nicename="motivation"><![CDATA[motivation]]></category>
  <category domain="post_tag" nicename="startup"><![CDATA[startup]]></category>
  <category domain="post_tag" nicename="ted"><![CDATA[TED]]></category>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>switch_like_status</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>19</wp:comment_id>
    <wp:comment_author><![CDATA[Ritvvij Parrikh (@ritvvijparrikh)]]></wp:comment_author>
    <wp:comment_author_email>ritvvijparrikh@twitter.example.com</wp:comment_author_email>
    <wp:comment_author_url>http://twitter.com/ritvvijparrikh</wp:comment_author_url>
    <wp:comment_author_IP>111.119.237.8</wp:comment_author_IP>
    <wp:comment_date>2014-01-01 19:14:24</wp:comment_date>
    <wp:comment_date_gmt>2014-01-01 19:14:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Till one can answer "WHY I want to work" to oneself, then on a long enough timeline the "WHAT and HOW of work and the HOW MUCH reward from the work" works out.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
      <wp:meta_value>2014-01-01 19:14:24</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:4:{s:4:"time";d:1388603664.3880751132965087890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_post_as</wp:meta_key>
      <wp:meta_value>twitter</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_avatar</wp:meta_key>
      <wp:meta_value>http://pbs.twimg.com/profile_images/378800000622338345/5cee2e270b30cdbc1768f1db4b743b33_normal.jpeg</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>hc_foreign_user_id</wp:meta_key>
      <wp:meta_value>270977983</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1388629391</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1388629391</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Using emacs as git mergetool</title>
  <link>http://prometheansacrifice.wordpress.com/2014/01/28/using-emacs-as-git-mergetool/</link>
  <pubDate>Tue, 28 Jan 2014 13:21:04 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=223</guid>
  <description/>
  <content:encoded><![CDATA[And for some reason emerge wouldn't open as a mergetool when I followed the steps <a href="http://www.emacswiki.org/emacs/EmergeDiff" target="_blank">mentioned</a> at <a href="http://emacswiki.org/" target="_blank">Emacs Wiki</a>. I kept getting the following error:

[code language="bash"]The merge tool emerge is not available as '/Users/prometheansacrifice/bin/emerge-for-git[/code]

Opened <a href="http://git-scm.com/docs/git-mergetool" target="_blank">docs</a> at <a href="http://git-scm.com/" target="_blank">git-scm </a>and realized git passes names of the local, remote and base copies of the file with merge conflicts with $LOCAL, $GLOBAL and $REMOTE respectively. The filename of the final merged copy is $MERGED.  So all you need to do is,

[code language="bash"]git config --global mergetool.emerge.cmd 'emacs -Q $LOCAL $REMOTE $BASE $MERGED'[/code]

And voila! You're ready to go.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>223</wp:post_id>
  <wp:post_date>2014-01-28 13:21:04</wp:post_date>
  <wp:post_date_gmt>2014-01-28 13:21:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>using-emacs-as-git-mergetool</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="emacs"><![CDATA[emacs]]></category>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_edit_last</wp:meta_key>
    <wp:meta_value><![CDATA[43679539]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>OpenSSH: sshd won't start !</title>
  <link>http://prometheansacrifice.wordpress.com/2014/03/30/openssh-sshd-wont-start/</link>
  <pubDate>Sun, 30 Mar 2014 13:11:23 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/2014/03/30/openssh-sshd-wont-start/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>243</wp:post_id>
  <wp:post_date>2014-03-30 13:11:23</wp:post_date>
  <wp:post_date_gmt>2014-03-30 13:11:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>openssh-sshd-wont-start</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>is_reblog</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>post_id</wp:meta_key>
    <wp:meta_value><![CDATA[510]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>blog_id</wp:meta_key>
    <wp:meta_value><![CDATA[14377950]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>reblog_snapshot</wp:meta_key>
    <wp:meta_value><![CDATA[O:8:"stdClass":7:{s:5:"title";s:27:"OpenSSH: sshd won't start !";s:4:"type";s:4:"post";s:9:"mime_type";s:0:"";s:6:"format";b:0;s:12:"modified_gmt";s:19:"2012-02-28 11:24:37";s:9:"permalink";s:42:"http://abi71.wordpress.com/2011/08/15/510/";s:7:"content";s:1318:"<div class="reblogged-content">Have a problem with sshd ? your sshd daemon won't start ? oke gonna fix now <!--more-->!

when I run sshd, a message appears:
[sourcecode language="bash"]
bash-4.1# sshd
sshd re-exec requires execution with an absolute path
[/sourcecode]

Try this:
[sourcecode language="bash"]
bash-4.1# whereis sshd
sshd: /usr/sbin/sshd /usr/man/man8/sshd.8.gz /usr/share/man/man8/sshd.8.gz /usr/X11/man/man8/sshd.8.gz
[/sourcecode]

Your sshd path at "/usr/sbin/sshd", so type:
[sourcecode language="bash"]
bash-4.1# /usr/sbin/sshd 
[/sourcecode]

if when running /usr/sbin/sshd appears a message like this:
[sourcecode language="bash"]
bash-4.1# /usr/sbin/sshd 
Could not load host key: /etc/ssh/ssh_host_rsa_key
Could not load host key: /etc/ssh/ssh_host_dsa_key
Disabling protocol version 2. Could not load host key
sshd: no hostkeys available -- exiting.
[/sourcecode]

The problem because the host key doesn't exist, you must re-generate, do the following ways:
[sourcecode language="bash"]
bash-4.1# ssh-keygen -b 1024 -f /etc/ssh/ssh_host_key -N ""
bash-4.1# ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N  "" 
bash-4.1# ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N ""
[/sourcecode]

NB: You must have root privileges to perform a step above

Good Luck :D !</div>";}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Obtaining user logs! (Task 1) </title>
  <link>http://prometheansacrifice.wordpress.com/2014/04/23/obtaining-user-logs-task-1/</link>
  <pubDate>Wed, 23 Apr 2014 06:09:51 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/2014/04/23/obtaining-user-logs-task-1/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>244</wp:post_id>
  <wp:post_date>2014-04-23 06:09:51</wp:post_date>
  <wp:post_date_gmt>2014-04-23 06:09:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>obtaining-user-logs-task-1</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>blog_id</wp:meta_key>
    <wp:meta_value><![CDATA[46402383]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>post_id</wp:meta_key>
    <wp:meta_value><![CDATA[114]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>is_reblog</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>reblog_snapshot</wp:meta_key>
    <wp:meta_value><![CDATA[O:8:"stdClass":8:{s:5:"title";s:30:"Obtaining user logs! (Task 1) ";s:4:"type";s:4:"post";s:9:"mime_type";s:0:"";s:6:"format";b:0;s:12:"modified_gmt";s:19:"2014-04-23 01:56:34";s:9:"permalink";s:69:"http://ksrivatsa.wordpress.com/2014/04/23/obtaining-user-logs-task-1/";s:7:"content";s:6221:"<div class="reblogged-content">
<p>Out of a lot of options that we had, we opted for OpenCart ( http://www.opencart.com/ ) for our front end e-commerce solution. So the first step was to download and configure open cart over a locally running LAMP server. The steps for setting up the OpenCart site on your Apache server can be found here : " http://docs.opencart.com/display/opencart/Installation " .</p>
<p> </p>
<p>                      <img id="i-124" class="size-full wp-image" src="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-061018.png" alt="Image" data-originalSrc="http://ksrivatsa.files.wordpress.com/2014/04/screenshot-from-2014-04-23-061018.png?w=650" data-rehosted="1"></p>
<p> </p>
<p>Apache provides a mod_usertrack ( "http://httpd.apache.org/docs/2.0/mod/mod_usertrack.html " ) module for logging the user activity by using cookies and generates a 'clickstream' log. An enhanced version of the same module can be found here by the name mod_cookietrack : " https://github.com/piykumar/modified_mod_cookietrack " . This module requires apache-dev to be installed and perl. After that you install it using the command 'sudo ./build.pl'.</p>
<p> </p>
<blockquote><p>NOTE : If you have errors saying that apxs file is not found in /usr/sbin/apxs try to look for it in the folder /usr/bin/apxs and then copy it there!</p></blockquote>
<p> </p>
<p>Once that is done and the module has been successfully added to your Apache server, its time to provide the UUIDs for our logs. You see, the module has support for an external library to generate UUIDs. The function should be written in C and the prototype for the same being</p>
<p style="text-align:center;"><strong>void gen_uid(char *uid, char *timestamp, char *ip);</strong></p>
<p>We have a basic function for it which generates UUIDs with the format "I....T...R...", where the numbers after I are the IP address and those after T are the timestamp and three digits after R are random digits generated for uniqueness! </p>
<p>Now that we have the function to generate the UUIDs, we add it to the module with the command, ' sudo ./build.pl --inc /where/uid/lives --lib uuid.c '.</p>
<p>The module has a many directives of which the CookieTracking directive has to be enabled for the tracking to begin. This can be done by adding the line 'CookieTracking on' in the server config file ie. either apache2.conf or httpd.conf. Some other useful directives are CookieExpires, CookieName, CookieNoteName etc. The details of all the directives are available in the documentation of mod_cookietrack.</p>
<p><a href="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065503.png">                      <img id="i-167" class="size-full wp-image" src="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065503.png" alt="Image" data-originalSrc="http://ksrivatsa.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065503.png?w=650" data-rehosted="1"></a></p>
<p>The CookieNoteName directive is used to refer to the UUID while generating custom logs. Here i have used the CookieNoteName uid for referring to the UUIDs. The name of the cookie here is 'ocart'. Once done save the file and <strong>remember to restart</strong> the server with the command ' sudo service apache2 restart '.</p>
<p>Now you can go to your OpenCart site and check if the cookie is being created by the WebConsole( Ctrl+Shift+K ). Here is a what it should look like!</p>
<p><a href="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065401.png">                     <img id="i-180" class="size-full wp-image" src="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065401.png" alt="Image" data-originalSrc="http://ksrivatsa.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065401.png?w=650" data-rehosted="1"></a>   </p>
<p>Notice that the cookie contains the name 'ocart' and the 64 bit UUID!</p>
<p>Finally we have to generate some custom logs. A really good place to learn more about generating server logs would be " <span><span class="null"><a class="_553k" href="http://www.serverwatch.com/tutorials/article.php/1128861/Apache-Guide-Logging-Part-3--Custom-Logs.htm" target="_blank" rel="nofollow">http://www.serverwatch.com/tutorials/article.php/1128861/Apache-Guide-Logging-Part-3--Custom-Logs.htm</a></span></span>l ". First we have to define a log format and refer it by some name. And then define a directory for the custom logs to be stored.</p>
<p><a href="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-0655031.png">                         <img id="i-185" class="size-full wp-image" src="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-0655031.png" alt="Image" data-originalSrc="http://ksrivatsa.files.wordpress.com/2014/04/screenshot-from-2014-04-23-0655031.png?w=650" data-rehosted="1"></a></p>
<p>In line 211 i have defined a Log Format which displays just the UUID( '%{uid}n' ) and the first line of the request( '%r' ) and give it a referral name 'client' . Next in line 213 i have defined as to where these custom logs will be stored ie. /var/www/logs/c_logs. Once that is done remember to<strong> create the directory and touch the file</strong> in the appropriate directory. And ofcourse please do <strong>restart the server</strong>!</p>
<p>Go to your OpenCart site and start sending requests, you will then see the logs piling up in the c_logs file in /var/www/logs folder!</p>
<p><a href="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-071926.png">                    <img id="i-196" class="size-full wp-image" src="http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-071926.png" alt="Image" data-originalSrc="http://ksrivatsa.files.wordpress.com/2014/04/screenshot-from-2014-04-23-071926.png?w=650" data-rehosted="1"></a></p>
<p>So this is just the beginning! The first of the 5 tasks to continue! Cheers! :D ,,/</p>
<p> </p>
<p> </p>
<p> </p>
</div>";s:15:"images_mirrored";i:5;}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Image</title>
  <link>http://prometheansacrifice.wordpress.com/2014/04/23/obtaining-user-logs-task-1/image/</link>
  <pubDate>Wed, 23 Apr 2014 06:09:53 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-061018.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>245</wp:post_id>
  <wp:post_date>2014-04-23 06:09:53</wp:post_date>
  <wp:post_date_gmt>2014-04-23 06:09:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-061018.png</wp:attachment_url>
</item>
<item>
  <title>Image</title>
  <link>http://prometheansacrifice.wordpress.com/2014/04/23/obtaining-user-logs-task-1/image-2/</link>
  <pubDate>Wed, 23 Apr 2014 06:09:54 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065503.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>246</wp:post_id>
  <wp:post_date>2014-04-23 06:09:54</wp:post_date>
  <wp:post_date_gmt>2014-04-23 06:09:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image-2</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065503.png</wp:attachment_url>
</item>
<item>
  <title>Image</title>
  <link>http://prometheansacrifice.wordpress.com/2014/04/23/obtaining-user-logs-task-1/image-3/</link>
  <pubDate>Wed, 23 Apr 2014 06:09:55 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065401.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>247</wp:post_id>
  <wp:post_date>2014-04-23 06:09:55</wp:post_date>
  <wp:post_date_gmt>2014-04-23 06:09:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image-3</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-065401.png</wp:attachment_url>
</item>
<item>
  <title>Image</title>
  <link>http://prometheansacrifice.wordpress.com/2014/04/23/obtaining-user-logs-task-1/image-4/</link>
  <pubDate>Wed, 23 Apr 2014 06:09:55 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-0655031.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>248</wp:post_id>
  <wp:post_date>2014-04-23 06:09:55</wp:post_date>
  <wp:post_date_gmt>2014-04-23 06:09:55</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image-4</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-0655031.png</wp:attachment_url>
</item>
<item>
  <title>Image</title>
  <link>http://prometheansacrifice.wordpress.com/2014/04/23/obtaining-user-logs-task-1/image-5/</link>
  <pubDate>Wed, 23 Apr 2014 06:09:56 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-071926.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>249</wp:post_id>
  <wp:post_date>2014-04-23 06:09:56</wp:post_date>
  <wp:post_date_gmt>2014-04-23 06:09:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>image-5</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>244</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://prometheansacrifice.files.wordpress.com/2014/04/screenshot-from-2014-04-23-071926.png</wp:attachment_url>
</item>
<item>
  <title>Installing  w3m</title>
  <link>http://prometheansacrifice.wordpress.com/?p=250</link>
  <pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>prometheansacrifice</dc:creator>
  <guid isPermaLink="false">http://prometheansacrifice.wordpress.com/?p=250</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>250</wp:post_id>
  <wp:post_date>2014-05-26 13:55:05</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
  </channel>
</rss>
